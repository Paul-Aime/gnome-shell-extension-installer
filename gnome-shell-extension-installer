#!/bin/bash

 ###########################################################################
 #                                                                         #
 #                     GNOME Shell Extension Installer                     #
 #                                                                         #
 #   Version: 1.2.2 (23/10/2014)                                           #
 #   Author: Ian Brunelli <ian@brunelli.me>                                #
 #   URL: https://github.com/ianbrunelli/gnome-shell-extension-installer   #
 #                                                                         #
 ###########################################################################

usage_guide() {
    echo -e "Usage: `basename $0` EXTENSION_ID [ EXTENSION_ID... ] [ GNOME_VERSION ] [ OPTIONS ]\n" \
            "\nOptions:" \
            "\n  -s or --search \"STRING\"\tInteractive search for extensions matching STRING." \
            "\n  --yes \t\t\tSkip all prompts (don't affect search mode)." \
            "\n  -h or --help \t\t\tPrint this message.\n" \
            "\nUsage examples:" \
            "\n  # Install \"Small Panel Icon\" for GNOME Shell 3.12 answering yes to all questions:" \
            "\n  `basename $0` 861 3.12 --yes\n" \
            "\n  # Search for extensions matching \"User Themes\":" \
            "\n  `basename $0` -s \"User Themes\""
}

check_version_validation() {
    DISABLE_VERSION_VALIDATION=$( gsettings get org.gnome.shell disable-extension-version-validation )
    [ "$DISABLE_VERSION_VALIDATION" == "true" ] ||
    { echo -en "\nExtension version validation is enabled on GNOME Shell." \
               "\nTo use extensions older than the current version of Shell, you have to disable it." \
               "\nDo it now (y/N)? "
      [ $SKIP_PROMPTS ] &&
      { echo "yes"
        DO_IT="yes"; } ||
      read DO_IT
      [[ ${DO_IT::1} =~ (y|Y) ]] &&
      gsettings set org.gnome.shell disable-extension-version-validation true &&
      echo -e "\nThe extension version validation has been disabled."; }
}

install_version() {
    DOWNLOAD_TARGET=$( sed "s/^.*$2\": {\"pk[\": ]*\([^\"]*\),.*$/\1/" <<< "$1" )
    echo "[$EXTENSION_NAME] Downloading extension"
    if curl $DOWNLOAD_PARAMETERS -o "/tmp/shell-extension-install.$EXTENSION_ID.zip" \
            "$EXTENSIONS_SITE/download-extension/$EXTENSION_UUID.shell-extension.zip?version_tag=$DOWNLOAD_TARGET";
    then
      extract_extension "$EXTENSION_NAME" "$EXTENSION_UUID" "$EXTENSION_ID" &&
      enable_extension "$EXTENSION_NAME" "$EXTENSION_UUID"
    else
      echo -e "\e[0;31mERROR\e[0m: Failed to download extension" >&2
    fi
}

select_version() {
    unset SELECTED_VERSION
    while [ ! "$SELECTED_VERSION" ]; do
        echo -n $1"Type a version to install: "
        if [ ! $SKIP_PROMPTS ]; then
            read INPUT
            for VERSION in ${EXTENSION_VERSIONS[@]}; do
                [ "$INPUT" == "$VERSION" ] &&
                SELECTED_VERSION="$INPUT"
            done
        else
            echo "${EXTENSION_VERSIONS[0]}"
            SELECTED_VERSION="${EXTENSION_VERSIONS[0]}"
        fi
        echo "Available versions: ${EXTENSION_VERSIONS[@]}"
    done
}

get_other_version() {
    [ "$EXTENSION_VERSIONS" ] &&
    { echo -e "\nThis extension is available for the following versions of GNOME Shell:"
      for VERSION in ${EXTENSION_VERSIONS[@]}; do
          echo "- $VERSION"
      done
      select_version; }
    echo
    [ "$SELECTED_VERSION" ] &&
    check_version_validation &&
    install_version "$1" "$SELECTED_VERSION"
}

enable_extension() {
    ENABLED_EXTENSIONS=$( gsettings get org.gnome.shell enabled-extensions )
    [ "$( grep -v "$2" <<< "$ENABLED_EXTENSIONS" )" ] &&
    { echo "[$1] Enabling extension"
      gsettings set org.gnome.shell enabled-extensions "${ENABLED_EXTENSIONS%?}, '$2']" &&
      echo "[$1] Extension enabled (you may have to restart GNOME Shell)"; } ||
    echo "[$1] The extension is already enabled"
}

extract_extension() {
    mkdir -p "$EXTENSIONS_PATH/$2"
    echo "[$1] Extracting extension"
    unzip -qq -o "/tmp/shell-extension-install.$3.zip" -d "$EXTENSIONS_PATH/$2"
    rm -f "/tmp/shell-extension-install.$3.zip"
}

extract_info() {
    EXTENSION_NAME=$( sed 's/^.*\"name\"[: \"]*\([^\"]*\).*$/\1/' <<< "$1" )
    EXTENSION_DESCRIPTION=$( sed 's/^.*\"description\": \"//g' <<< "${EXTENSIONS_QUERY[$n]}" |
                             sed 's/\", \"creator\".*$//g' |
                             sed 's/\\\"/\"/g' )
    EXTENSION_CREATOR=$( sed 's/^.*\"creator\"[: \"]*\([^\"]*\).*$/\1/' <<< "$1" )
    EXTENSION_UUID=$( sed 's/^.*\"uuid\"[: \"]*\([^\"]*\).*$/\1/' <<< "$1" )
    EXTENSION_ID=$( sed 's/^.*\"pk\"[: \"]*\([^\"]*\),.*$/\1/' <<< "$1" )
    EXTENSION_LINK=$( sed 's/^.*\"link\"[: \"]*\([^\"]*\).*$/\1/' <<< "$1" )
    EXTENSION_URL=$( grep "download_url" <<< "$1" |
                     sed 's/^.*\"download_url\"[: \"]*\([^\"]*\).*$/\1/' )
    EXTENSION_VERSIONS=($( sed 's/[\"]*:[ ]*{[\"]*pk[\"]*:/\n/g' <<< "$1" |
                           sed '$ d' | sed 's/^.*\"//g' | sort -rV ))
}

download_info() {
    unset EXTENSION_INFO EXTENSIONS_QUERY
    PAGES=-1
    TOTAL=0
    EXTENSION_INFO=$( curl $DOWNLOAD_PARAMETERS "$EXTENSIONS_SITE$1" )
    case "$?" in
        0)
            if [ "$( echo $EXTENSION_INFO | grep name )" ]; then
                return 0
            else
                echo -e "\e[0;31mERROR\e[0m: $2" >&2
                return 2
            fi
            ;;
        22)
            echo -e "\e[0;31mERROR\e[0m: $3 could not be found" >&2
            return 22
            ;;
        *)
            echo -e "\e[0;31mERROR\e[0m: $4 (curl error $?)" >&2
            return 1
            ;;
    esac
}

search_help() {
    echo -e "<number(s)>\tInstall extension(s)" \
            "\nd<number(s)>\tGet description(s)" \
            "\nl<number(s)>\tGet link(s) on extensions.gnome.org" \
            "\np<number>\tGo to page" \
            "\n/<string>\tPerform another search" \
            "\nr\t\tPrint the search content again" \
            "\nhelp\t\tShow this message" \
            "\nexit\t\tExit search shell"
}

load_content() {
    PAGES=$( sed 's/^.*numpages[\": ]*\([^\"]*\),.*$/\1/' <<< "$EXTENSION_INFO" )
    TOTAL=$( sed 's/^.*total[\": ]*\([^\"]*\),.*$/\1/' <<< "$EXTENSION_INFO" )
    echo -e "Displaying $TOTAL item(s). Page $PAGE_NUM of $PAGES.\n"
    IFS=$'\n' read -d '' -r -a EXTENSIONS_QUERY <<< "$( echo $EXTENSION_INFO | cut -f1 --complement -d"[" | sed 's/{[\"]*shell_version_map[\"]*:/\n/g' )"

    COUNTER=0
    for EXTENSION in "${EXTENSIONS_QUERY[@]}"; do
        extract_info "$EXTENSION"
        echo -e "$COUNTER: $EXTENSION_NAME, by $EXTENSION_CREATOR" \
                "\n   Versions: ${EXTENSION_VERSIONS[@]}"
        (( COUNTER++ ))
    done
    echo
}

interactive_search() {
    echo -e "Type \"help\" to get information on how to use the search."
    while [ ! "$EXIT" ]; do
        echo -n "Enter a command: "
        read COMMAND
        case "$COMMAND" in
            [0-9]*)
                for n in "$COMMAND"; do
                    if extract_info "${EXTENSIONS_QUERY[$n]}" && [ $n -lt $TOTAL ]; then
                        select_version "[$EXTENSION_NAME] "
                        install_version "${EXTENSIONS_QUERY[$n]}" "$SELECTED_VERSION"
                    else
                        echo "[$n] Invalid extension number" >&2
                    fi
                done
                ;;
            d[0-9]*)
                for n in ${COMMAND:1}; do
                    if [ $n -lt $TOTAL ]; then
                        extract_info "${EXTENSIONS_QUERY[$n]}"
                        echo -e "[$EXTENSION_NAME]"
                        echo -e "$EXTENSION_DESCRIPTION"
                    else
                        echo "[$n] Invalid extension number" >&2
                    fi
                done
                ;;
            l[0-9]*)
                if [ ${COMMAND:1} -lt $TOTAL ]; then
                    for n in ${COMMAND:1}; do
                        extract_info "${EXTENSIONS_QUERY[$n]}" &&
                        echo "[$EXTENSION_NAME] $EXTENSIONS_SITE$EXTENSION_LINK" ||
                        echo "[$n] Invalid extension number" >&2
                    done
                else
                        echo "[$n] Invalid extension number" >&2
                    fi
                ;;
            p[0-9]*)
                if [ ${COMMAND:1} -le $PAGES ]; then
                    PAGE_NUM="${COMMAND:1}"
                    echo "[$SEARCH_STRING] Obtaining page $PAGE_NUM"
                    download_info "/extension-query/?search=$SEARCH_STRING&page=$PAGE_NUM" \
                                  "No items to display" \
                                  "The page $PAGE_NUM" \
                                  "Failed to obtain page info" &&
                    load_content
                else
                    echo "[${COMMAND:1}] Invalid page number" >&2
                fi
                ;;
            h | help)
                search_help
                ;;
            r)
                [ $TOTAL -gt 0 ] &&
                load_content
                ;;
            exit)
                exit
                ;;
            /*)
                if [ "${COMMAND:1}" ]; then
                    SEARCH_STRING="${COMMAND:1}"
                    echo "[$SEARCH_STRING] Performing search"
                    download_info "/extension-query/?search=$SEARCH_STRING&page=1" \
                                  "No items to display" \
                                  "The search page for \"$SEARCH_STRING\"" \
                                  "Failed to obtain page info" &&
                    load_content
                else
                    echo "No search string specified" >&2
                fi
                ;;
            *)
                echo "Unknown command. Type h for help."
                ;;
        esac
    done
}

main_program() {
    echo "[$EXTENSION_ID] Obtaining extension info"
    download_info "/extension-info/?pk=$EXTENSION_ID&shell_version=$1" \
                  "Blank file" \
                  "The extension $EXTENSION_ID" \
                  "Failed to obtain extension info" &&
    { extract_info "$EXTENSION_INFO"
      if [ "$EXTENSION_URL" ]; then
          echo "[$EXTENSION_NAME] Downloading extension"
          if curl $DOWNLOAD_PARAMETERS -o "/tmp/shell-extension-install.$EXTENSION_ID.zip" "$EXTENSIONS_SITE$EXTENSION_URL"; then
              extract_extension "$EXTENSION_NAME" "$EXTENSION_UUID" "$EXTENSION_ID" &&
              enable_extension "$EXTENSION_NAME" "$EXTENSION_UUID"
          else
              echo -e "\e[0;31mERROR\e[0m: Failed to download extension" >&2
          fi
      else
          echo "[$EXTENSION_NAME] Extension not available for GNOME Shell $1"
          get_other_version "$1"
      fi; }
}

GNOME_VERSION=$( gnome-shell --version )
set "${GNOME_VERSION:12}" "$@"

DOWNLOAD_PARAMETERS="-Lfs"
EXTENSIONS_SITE="https://extensions.gnome.org"
EXTENSIONS_PATH="$HOME/.local/share/gnome-shell/extensions"

COUNTER="$#"
while [ $COUNTER -gt 0 ]; do
    if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
        usage_guide
        exit 0
    elif [ "$1" == "-s" ] || [ "$1" == "--search" ]; then
        unset SKIP_PROMPTS
        SEARCH_STRING="$2"
        PAGE_NUM="1"
        if [ "$SEARCH_STRING" ]; then
            echo "[$SEARCH_STRING] Performing search"
            download_info "/extension-query/?search=${SEARCH_STRING// /%20}&page=1" \
                          "No items to display" \
                          "The search page for \"$SEARCH_STRING\"" \
                          "Failed to obtain page info" &&
            load_content
        fi
        interactive_search
    elif [ "$1" == "--yes" ]; then
        SKIP_PROMPTS=1
        shift
        (( COUNTER -= 1 ))
    elif [[ $1 =~ ^3.[0-9.]+$ ]]; then
        TARGET_VERSION="$1"
        shift
        (( COUNTER -= 1 ))
    elif [[ $1 =~ ^[0-9]+$ ]]; then
        set "$@" "$1"
        shift
        (( COUNTER -= 1 ))
    elif [[ $1 =~ ^- ]]; then
        echo -e "`basename $0`: unrecognized option '$1'\n" >&2
        usage_guide
        exit 1
	else
        echo "`basename $0`: '$1' is not a valid Extension ID" >&2
        exit 1
	fi
done

for EXTENSION_ID in "$@"; do
    main_program "$TARGET_VERSION"
done
