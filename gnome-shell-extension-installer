#!/bin/bash

 ###########################################################################
 #                                                                         #
 #                     GNOME Shell Extension Installer                     #
 #                                                                         #
 #   Version: 1.3.3 (31/10/2014)                                           #
 #   Author: Ian Brunelli <ian@brunelli.me>                                #
 #   URL: https://github.com/ianbrunelli/gnome-shell-extension-installer   #
 #                                                                         #
 ###########################################################################

usage_guide() {
    echo -e "Usage: $SCRIPT_NAME EXTENSION_ID [ EXTENSION_ID... ] [ GNOME_VERSION ] [ OPTIONS ]\n" \
            "\nOptions:" \
            "\n  -s or --search [ STRING ]\tInteractive search." \
            "\n  --yes \t\t\tSkip all prompts (don't affect search)." \
            "\n  -h or --help \t\t\tPrint this message.\n" \
            "\nUsage examples:" \
            "\n  # Install \"Small Panel Icon\" for GNOME Shell 3.12 answering yes to all questions:" \
            "\n  $SCRIPT_NAME 861 3.12 --yes\n" \
            "\n  # Search for extensions matching \"User Themes\":" \
            "\n  $SCRIPT_NAME -s \"User Themes\""
}

check_version_validation() {
    DISABLE_VERSION_VALIDATION=$( gsettings get org.gnome.shell disable-extension-version-validation )
    [ "$DISABLE_VERSION_VALIDATION" == "true" ] ||
    { echo -en "\nExtension version validation is enabled on GNOME Shell." \
               "\nTo use extensions older than the current version of Shell, you have to disable it." \
               "\nDo it now (y/N)? "
      [ $SKIP_PROMPTS ] &&
      { echo "yes"
        DO_IT="yes"; } ||
      read DO_IT
      [[ ${DO_IT::1} =~ (y|Y) ]] &&
      gsettings set org.gnome.shell disable-extension-version-validation true &&
      echo -e "\nThe extension version validation has been disabled."; }
}

install_version() {
    DOWNLOAD_TARGET=$( sed "s/^.*$2\": {\"pk[\": ]*\([^\"]*\),.*$/\1/" <<< "$1" )
    echo "[$EXTENSION_NAME] Downloading extension"
    if curl $DOWNLOAD_PARAMETERS -o "/tmp/shell-extension-install.$EXTENSION_ID.zip" \
            "$EXTENSIONS_SITE/download-extension/$EXTENSION_UUID.shell-extension.zip?version_tag=$DOWNLOAD_TARGET";
    then
      extract_extension "$EXTENSION_NAME" "$EXTENSION_UUID" "$EXTENSION_ID" &&
      enable_extension "$EXTENSION_NAME" "$EXTENSION_UUID"
    else
      echo -e "\e[0;31mERROR\e[0m: Failed to download extension" >&2
    fi
}

check_version_availability() {
    for VERSION in ${EXTENSION_VERSIONS[@]}; do
        [ "$1" == "$VERSION" ] &&
        SELECTED_VERSION="$1"
    done
}

select_version() {
    unset SELECTED_VERSION
    if [[ "${EXTENSION_VERSIONS[0]}" ]]; then
        while [[ ! $SELECTED_VERSION ]]; do
           echo -n $1"Type a version to install: "
           if [[ ! $SKIP_PROMPTS ]]; then
               read INPUT
               check_version_availability "$INPUT"
               [[ $INPUT =~ (q|quit|exit) ]] && return 1
               [[ ! $SELECTED_VERSION ]] &&
               echo "Available versions: ${EXTENSION_VERSIONS[@]}"
           else
               echo "${EXTENSION_VERSIONS[0]}"
               SELECTED_VERSION="${EXTENSION_VERSIONS[0]}"
           fi
        done
    else
        echo $1"No version available"
    fi
}

get_other_version() {
    [ "$EXTENSION_VERSIONS" ] &&
    { echo -e "\nThis extension is available for the following versions of GNOME Shell:"
      for VERSION in ${EXTENSION_VERSIONS[@]}; do
          echo "- $VERSION"
      done
      select_version; }
    echo
    [ "$SELECTED_VERSION" ] &&
    check_version_validation &&
    install_version "$EXTENSION_INFO" "$SELECTED_VERSION"
}

enable_extension() {
    ENABLED_EXTENSIONS=$( gsettings get org.gnome.shell enabled-extensions |
                          cut -f 1 -d "[" --complement )
    [ "$( grep -v "$2" <<< "$ENABLED_EXTENSIONS" )" ] &&
    { echo "[$1] Enabling extension"
      [[ ${ENABLED_EXTENSIONS%?} ]] && SEPARATOR=", "
      gsettings set org.gnome.shell enabled-extensions "[${ENABLED_EXTENSIONS%?}$SEPARATOR'$2']" &&
      echo "[$1] Extension enabled (you may have to restart GNOME Shell)"; } ||
    echo "[$1] The extension is already enabled"
}

extract_extension() {
    mkdir -p "$EXTENSIONS_PATH/$2"
    echo "[$1] Extracting extension"
    unzip -qq -o "/tmp/shell-extension-install.$3.zip" -d "$EXTENSIONS_PATH/$2"
    rm -f "/tmp/shell-extension-install.$3.zip"
}

extract_info() {
    EXTENSION_NAME=$( sed 's/^.*\"name\"[: \"]*\([^\"]*\).*$/\1/' <<< "$1" )
    EXTENSION_DESCRIPTION=$( sed 's/^.*\"description\": \"//g' <<< "${EXTENSIONS_QUERY[$n]}" |
                             sed 's/\", \"creator\".*$//g' |
                             sed 's/\\\"/\"/g' )
    EXTENSION_CREATOR=$( sed 's/^.*\"creator\"[: \"]*\([^\"]*\).*$/\1/' <<< "$1" )
    EXTENSION_UUID=$( sed 's/^.*\"uuid\"[: \"]*\([^\"]*\).*$/\1/' <<< "$1" )
    EXTENSION_ID=$( sed 's/^.*\"pk\"[: \"]*\([^\"]*\),.*$/\1/' <<< "$1" )
    EXTENSION_LINK=$( sed 's/^.*\"link\"[: \"]*\([^\"]*\).*$/\1/' <<< "$1" )
    EXTENSION_URL=$( grep "download_url" <<< "$1" |
                     sed 's/^.*\"download_url\"[: \"]*\([^\"]*\).*$/\1/' )
    EXTENSION_VERSIONS=($( sed 's/[\"]*:[ ]*{[\"]*pk[\"]*:/\n/g' <<< "$1" |
                           sed '$ d' | sed 's/^.*\"//g' | sort -rV ))
}

download_info() {
    unset EXTENSION_INFO EXTENSIONS_QUERY
    PAGES=-1
    TOTAL=-1
    EXTENSION_INFO=$( curl $DOWNLOAD_PARAMETERS "$EXTENSIONS_SITE$1" )
    case "$?" in
        0)
            if [ "$( echo $EXTENSION_INFO | grep name )" ]; then
                return 0
            else
                echo -e "\e[0;31mERROR\e[0m: $2" >&2
                return 2
            fi
            ;;
        22)
            echo -e "\e[0;31mERROR\e[0m: $3 could not be found" >&2
            return 22
            ;;
        *)
            echo -e "\e[0;31mERROR\e[0m: $4 (curl error $?)" >&2
            return 1
            ;;
    esac
}

search_help() {
    echo -e "<number(s)>\tInstall extension(s)" \
            "\nd<number(s)>\tGet description(s)" \
            "\nl<number(s)>\tGet link(s) on extensions.gnome.org" \
            "\np<number>\tGo to page" \
            "\nr\t\tPrint the search content again" \
            "\nsn\t\tSort by name" \
            "\nsr\t\tSort by recent" \
            "\nsd\t\tSort by downloads" \
            "\nsp\t\tSort by popularity (default)" \
            "\n/<string>\tPerform another search" \
            "\nhome\t\tLoad extensions.gnome.org homepage" \
            "\nh or help\tShow this message" \
            "\nexit\t\tExit search shell"
}

load_content() {
    PAGES=$( sed 's/^.*numpages[\": ]*\([^\"]*\),.*$/\1/' <<< "$EXTENSION_INFO" )
    TOTAL=$( sed 's/^.*total[\": ]*\([^\"]*\),.*$/\1/' <<< "$EXTENSION_INFO" )
    echo -e "Displaying $TOTAL item(s). Page $PAGE_NUM of $PAGES.\n"
    IFS=$'\n' read -d '' -r -a EXTENSIONS_QUERY <<< "$( echo $EXTENSION_INFO | cut -f1 --complement -d"[" | sed 's/{[\"]*shell_version_map[\"]*:/\n/g' )"

    COUNTER=0
    for EXTENSION in "${EXTENSIONS_QUERY[@]}"; do
        extract_info "$EXTENSION"
        echo -en "$COUNTER: $EXTENSION_NAME, by $EXTENSION_CREATOR" \
                "\n   Versions: "
        [[ "${EXTENSION_VERSIONS[@]}" ]] &&
        echo "${EXTENSION_VERSIONS[@]}" ||
        echo "(no version available)"
        (( COUNTER++ ))
    done
    echo
}

interactive_search() {
    echo -e "Type \"help\" to get information on how to use the search."
    while [[ ! $EXIT ]]; do
        echo -n "Enter a command: "
        read COMMAND
        if [[ $COMMAND =~ ^[0-9]+( |[0-9])*$ ]]; then
            for n in $COMMAND; do
                if extract_info "${EXTENSIONS_QUERY[$n]}" && [ $n -lt $TOTAL ]; then
                    [[ ${#EXTENSION_VERSIONS[@]} == 1 ]] &&
                    SELECTED_VERSION="${EXTENSION_VERSIONS[@]}"
                    check_version_availability "$GNOME_VERSION"
                    [ "$SELECTED_VERSION" ] ||
                    select_version "[$EXTENSION_NAME] "
                    [ "$SELECTED_VERSION" ] &&
                    install_version "${EXTENSIONS_QUERY[$n]}" "$SELECTED_VERSION"
                else
                    echo "[$n] Invalid extension number" >&2
                fi
            done
        elif [[ $COMMAND =~ ^d([0-9 ])+$ ]]; then
            for n in ${COMMAND:1}; do
                if [[ $n -lt $TOTAL ]]; then
                    extract_info "${EXTENSIONS_QUERY[$n]}"
                    if [[ $( echo -e "$EXTENSION_DESCRIPTION" | wc -l ) -gt 10 ]] &&
                       [[ $( type less 2> "/dev/null" ) ]]; then
                        less <<< "$( echo -e "[$EXTENSION_NAME]\n$EXTENSION_DESCRIPTION" )"
                    else
                        echo -e "[$EXTENSION_NAME]\n$EXTENSION_DESCRIPTION"
                    fi
                else
                    echo "[$n] Invalid extension number" >&2
                fi
            done
        elif [[ $COMMAND =~ ^l([0-9 ])+$ ]]; then
            for n in ${COMMAND:1}; do
                if [[ $n -lt $TOTAL ]]; then
                    extract_info "${EXTENSIONS_QUERY[$n]}" &&
                    echo "[$EXTENSION_NAME] $EXTENSIONS_SITE$EXTENSION_LINK" ||
                    echo "[$n] Invalid extension number" >&2
                else
                    echo "[$n] Invalid extension number" >&2
                fi
            done
        elif [[ $COMMAND =~ ^p( )*[0-9]+$ ]]; then
            PAGE="$( echo ${COMMAND:1} | sed 's/^0*//' )"
            if [[ $PAGE -le $PAGES ]]; then
                PAGE_NUM="${COMMAND:1}"
                [[ $SEARCH_STRING ]] &&
                echo "[$SEARCH_STRING] Obtaining page $PAGE_NUM" ||
                echo "Obtaining page $PAGE_NUM"
                download_info "/extension-query/?sort=$SORT&search=$SEARCH_STRING&page=$PAGE_NUM" \
                              "No items to display" \
                              "The page $PAGE_NUM" \
                              "Failed to obtain page info" &&
                load_content
            else
                echo "[$PAGE] Invalid page number" >&2
            fi
        elif [[ $COMMAND =~ ^s(n|r|d|p)$ ]]; then
            case ${COMMAND:1:1} in
                n) SORT="name" ;;
                r) SORT="recent" ;;
                d) SORT="downloads" ;;
                p) SORT="popularity" ;;
            esac
            echo "Sorting by $SORT"
            [ $TOTAL -gt 0 ] &&
            { [[ $SEARCH_STRING ]] &&
              echo "[$SEARCH_STRING] Obtaining page 1" ||
              echo "Obtaining page 1"
                  download_info "/extension-query/?sort=$SORT&search=$SEARCH_STRING&page=1" \
                                "No items to display" \
                                "The page $PAGE_NUM" \
                                "Failed to obtain page info" &&
                  load_content; }
        elif [[ $COMMAND =~ ^(h|help)$ ]]; then
            search_help
        elif [[ $COMMAND =~ ^home$ ]]; then
            unset SEARCH_STRING
            echo "Loading homepage"
            download_info "/extension-query/?sort=$SORT&page=1" \
                          "No items to display" \
                          "The page" \
                          "Failed to obtain page info" &&
            load_content
        elif [[ $COMMAND =~ ^r$ ]]; then
            [ $TOTAL -gt 0 ] &&
            load_content
        elif [[ $COMMAND =~ ^exit$ ]]; then
            exit
        elif [[ $COMMAND =~ ^/ ]]; then
            if [ "${COMMAND:1}" ]; then
                SEARCH_STRING="${COMMAND:1}"
                echo "[$SEARCH_STRING] Performing search"
                download_info "/extension-query/?sort=$SORT&search=$SEARCH_STRING&page=1" \
                              "No items to display" \
                              "The search page for \"$SEARCH_STRING\"" \
                              "Failed to obtain page info" &&
                load_content
            else
                echo "No search string specified" >&2
            fi
        else
            echo "Unknown command. Type h for help." >&2
        fi
    done
}

main_program() {
    echo "[$EXTENSION_ID] Obtaining extension info"
    download_info "/extension-info/?pk=$EXTENSION_ID" \
                  "Blank file" \
                  "The extension $EXTENSION_ID" \
                  "Failed to obtain extension info" &&
    { extract_info "$EXTENSION_INFO"
      check_version_availability "$1"
      if [ "$SELECTED_VERSION" ]; then
          install_version "$EXTENSION_INFO" "$SELECTED_VERSION"
      else
          echo "[$EXTENSION_NAME] Extension not available for GNOME Shell $1"
          get_other_version "$1"
      fi; }
}

GNOME_VERSION="$( grep -oP "[0-9]+\.[0-9]+" <<< "$( gnome-shell --version )" )"
DOWNLOAD_PARAMETERS="-Lfs"
EXTENSIONS_SITE="https://extensions.gnome.org"
SORT="popularity"

[[ $EUID -eq 0 ]] &&
EXTENSIONS_PATH="/usr/share/gnome-shell/extensions" ||
EXTENSIONS_PATH="$HOME/.local/share/gnome-shell/extensions"

SCRIPT_NAME=$( basename "$0" )
PAGES=-1
TOTAL=-1

COUNTER="$#"
while [ $COUNTER -gt 0 ]; do
    if [[ $1 =~ ^-(h|-help)$ ]]; then
        usage_guide
        exit 0
    elif [[ $1 =~ ^-(s|-search)$ ]]; then
        unset SKIP_PROMPTS
        SEARCH_STRING="$2"
        PAGE_NUM="1"
        [[ $SEARCH_STRING ]] &&
        { echo "[$SEARCH_STRING] Performing search"
          download_info "/extension-query/?sort=$SORT&search=${SEARCH_STRING// /%20}&page=1" \
                        "No items to display" \
                        "The search page for \"$SEARCH_STRING\"" \
                        "Failed to obtain page info" &&
          load_content; }
        interactive_search
    elif [ "$1" == "--yes" ]; then
        SKIP_PROMPTS=1
        shift
        (( COUNTER -= 1 ))
    elif [[ $1 =~ ^3.[0-9.]+$ ]]; then
        GNOME_VERSION="$1"
        shift
        (( COUNTER -= 1 ))
    elif [[ $1 =~ ^[0-9]+$ ]]; then
        set "$@" "$1"
        shift
        (( COUNTER -= 1 ))
    elif [[ $1 =~ ^- ]]; then
        echo -e "$SCRIPT_NAME: unrecognized option '$1'\n" >&2
        usage_guide >&2
        exit 1
    else
        echo "$SCRIPT_NAME: '$1' is not a valid Extension ID" >&2
        exit 1
    fi
done

for EXTENSION_ID in "$@"; do
    main_program "$GNOME_VERSION"
done
